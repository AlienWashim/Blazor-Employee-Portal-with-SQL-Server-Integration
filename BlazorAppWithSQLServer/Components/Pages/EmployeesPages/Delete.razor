@page "/employees/delete"
@using Microsoft.EntityFrameworkCore
@using BlazorAppWithSQLServer.Models
@inject IDbContextFactory<BlazorAppWithSQLServer.Data.BlazorAppWithSQLServerContext> DbFactory
@inject NavigationManager NavigationManager
@using MudBlazor
<PageTitle>Delete</PageTitle>


<h3>Are you sure you want to delete this?</h3>
<div>
    <hr />
    @if (employees is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@employees.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Designation</dt>
            <dd class="col-sm-10">@employees.Designation</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Salary</dt>
            <dd class="col-sm-10">@employees.Salary</dd>
        </dl>

        <EditForm method="post" Model="employees" OnValidSubmit="DeleteEmployees" FormName="delete" Enhance>

            <button type="submit" disabled="@(employees is null)">
                <MudChip Text="green" Color="Color.Error" Value="@Color.Success">
                    <MudIcon Icon="@Icons.Material.Filled.Delete" Title="Delete" />
                    Delete
                </MudChip>
            </button>
            <a href="/employees">
                <MudChip Text="green" Color="Color.Dark" Value="@Color.Info">
                    <MudIcon Icon="@Icons.Material.Filled.ArrowBack" Title="Back" />
                    Back to List
                </MudChip>
            </a>
        </EditForm>
    }
</div>

@code {
    private Employees? employees;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        employees = await context.Employees.FirstOrDefaultAsync(m => m.Id == Id);

        if (employees is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteEmployees()
    {
        using var context = DbFactory.CreateDbContext();
        context.Employees.Remove(employees!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/employees");
    }
}
